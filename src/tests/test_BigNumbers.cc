#include <gtest/gtest.h>
#include <BigNumbers/BigNumbers.h>
#include <vector>

using vectorOfTupleWithLhsRhsRes = std::vector<std::tuple<std::string, std::string, std::string>>;
using TestLargeNumberAdditionData = vectorOfTupleWithLhsRhsRes;
using TestLargeNumberSubtractionData = vectorOfTupleWithLhsRhsRes;
using TestLargeNumberMultipleData = vectorOfTupleWithLhsRhsRes;
using TestLargeNumberDivisionData = vectorOfTupleWithLhsRhsRes;
using TestLargeNumberShiftData = vectorOfTupleWithLhsRhsRes;

std::vector<std::string> get_small_primes_dec() // Primes lower than 1000
{
    const std::vector<std::string> prime_dec_values{ "2","3","5","7","11","13","17","19","23","29","31","37","41","43","47","53","59","61","67","71","73","79","83","89","97","101","103","107","109","113","127","131","137","139","149","151","157","163","167","173","179","181","191","193","197","199","211","223","227","229","233","239","241","251","257","263","269","271","277","281","283","293","307","311","313","317","331","337","347","349","353","359","367","373","379","383","389","397","401","409","419","421","431","433","439","443","449","457","461","463","467","479","487","491","499","503","509","521","523","541","547","557","563","569","571","577","587","593","599","601","607","613","617","619","631","641","643","647","653","659","661","673","677","683","691","701","709","719","727","733","739","743","751","757","761","769","773","787","797","809","811","821","823","827","829","839","853","857","859","863","877","881","883","887","907","911","919","929","937","941","947","953","967","971","977","983","991","997" };
    return std::move(prime_dec_values);
}
std::vector<std::string> get_small_primes_hex() // Primes lower than 1000
{
    const std::vector<std::string> prime_hex_values{ "2","3","5","7","b","d","11","13","17","1d","1f","25","29","2b","2f","35","3b","3d","43","47","49","4f","53","59","61","65","67","6b","6d","71","7f","83","89","8b","95","97","9d","a3","a7","ad","b3","b5","bf","c1","c5","c7","d3","df","e3","e5","e9","ef","f1","fb","101","107","10d","10f","115","119","11b","125","133","137","139","13d","14b","151","15b","15d","161","167","16f","175","17b","17f","185","18d","191","199","1a3","1a5","1af","1b1","1b7","1bb","1c1","1c9","1cd","1cf","1d3","1df","1e7","1eb","1f3","1f7","1fd","209","20b","21d","223","22d","233","239","23b","241","24b","251","257","259","25f","265","269","26b","277","281","283","287","28d","293","295","2a1","2a5","2ab","2b3","2bd","2c5","2cf","2d7","2dd","2e3","2e7","2ef","2f5","2f9","301","305","313","31d","329","32b","335","337","33b","33d","347","355","359","35b","35f","36d","371","373","377","38b","38f","397","3a1","3a9","3ad","3b3","3b9","3c7","3cb","3d1","3d7","3df","3e5" };
    return std::move(prime_hex_values);
}

TEST(BigNumberTest, testLargeNumbersDecimalAddition){

    const TestLargeNumberAdditionData testLargeNumberAdditionDecData = 
    {
        { "0", "0", "0"  },
        { "0", "1", "1"  },
        { "1", "-1", "0" },
        { "0", "-1", "-1" },
        { "-1", "-1", "-2" },
        { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215", 
          "0",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
        },
        { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
          "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"
        },
        { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
          "-89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607",
          "1"
        }
    };

    // Iterate over Data for large number addition
    for (const auto & entry : testLargeNumberAdditionDecData)
    {
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromDec({std::get<0>(entry)});

        // get "RightHandSide(RHS)"
        rhs.FromDec({std::get<1>(entry)});

        // perform addition operation on LHS and RHS
        BigNumber result = lhs + rhs;

        // check if the result is equal to the expected result.
        EXPECT_EQ(std::get<2>(entry), result.ToDec());
    }
}

TEST(BigNumberTest, testLargeNumbersHexaAddition){
    const TestLargeNumberAdditionData testLargeNumberAdditionHexData = 
    {
        { "0", "0", "0"  },
        { "0", "1", "1"  },
        { "1", "-1", "0" },
        { "0", "-1", "-1" },
        { "-1", "-1", "-2" },
        { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 
          "0",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
        },
        { "8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"
        },
        { "8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "-7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
          "1"
        }
    };

    // Iterate over Data for large number addition
    for(const auto& [lhshex, rhshex, expectedRes] : testLargeNumberAdditionHexData){
        BigNumber lhs, rhs; 
        lhs.FromHex(lhshex);
        rhs.FromHex(rhshex);
        BigNumber result = lhs + rhs; 
        EXPECT_EQ(expectedRes, result.ToDec());
    }
}

TEST(BigNumberTest, testLargeNumbersHexaSubtraction){
    // Verify if Subtractions can be performed on the large number in hexadecimals.
    const TestLargeNumberSubtractionData testLargeNumberSubtractionHexaData = 
    {
        { "0", "0", "0"  },
        { "0", "1", "-1"  },
        { "1", "-1", "2" },
        { "0", "-1", "1" },
        { "-1", "-1", "0" },
        { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 
          "0",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
        },
        { "8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
          "1"
        },
        { "8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "-7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"
        }
    };

    // Iterate over Data for large number addition (structured bindings)
    for (const auto& [lhsHex, rhsHex, expectedResult] : testLargeNumberSubtractionHexaData)
    {
        BigNumber lhs, rhs;

        // Get LeftHandSide (LHS) and RightHandSide (RHS)
        lhs.FromHex({lhsHex});
        rhs.FromHex({rhsHex});

        // Perform LHS - RHS
        BigNumber result = lhs - rhs;

        // Check if the result is equal to the expected result
        EXPECT_EQ(expectedResult, result.ToDec());
    }
}

TEST(BigNumberTest, testLargeNumbersDecimalSubtraction){
    const TestLargeNumberSubtractionData testLargeNumberSubtractionData = 
    {
        { "0", "0", "0"  },
        { "0", "1", "-1"  },
        { "1", "-1", "2" },
        { "0", "-1", "1" },
        { "-1", "-1", "0" },
        { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215", 
          "0",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
        },
        { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
          "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607",
          "1"
        },
        { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
          "-89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607",
          "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"
        }
    };


    // Iterate over Data for large number addition
    for (const auto &[lhshex, rhshex, expectedRes] : testLargeNumberSubtractionData){
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromDec(lhshex);

        // get "RightHandSide(RHS)"
        rhs.FromDec(rhshex);

        // perform  LHS - RHS
        BigNumber result = lhs - rhs;

        // check if the result is equal to the expected result.
        EXPECT_EQ(expectedRes, result.ToDec());
    }
}


TEST(BigNumberTest, testLargeNumbersDecimalMultiple)
{
    // Verify if multiplication  can be performed on the large number in decimals.

     /* Data for large number multiplication
        The following data will be interprested as - {"LefthandSide(LHS)", "RightHandSide(RHS)", "ExpectedResult(ER)"}, where LHS * RHS = ER
     */

    const TestLargeNumberMultipleData testLargeNumberMultipleData = 
    {
         { "0", "0", "0" },
         { "0", "-1", "0" },
         { "-1", "-1", "1" },
         { "1", "1", "1" },
         { "1000", "100000000000000000000", "100000000000000000000000" },
         { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215", 
           "-1", 
           "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
         },
         { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
           "0",
           "0"
         },
         { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607",
           "2",
           "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137214"
         }
    };

    // Iterate over Data for large number addition
    for (const auto &[lhsRaw, rhsRaw, resultRaw] : testLargeNumberMultipleData){
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromDec(lhsRaw);
        
        // get "RightHandSide(RHS)"
        rhs.FromDec(rhsRaw);

        // perform LHS * RHS
        BigNumber result = lhs * rhs;

        // check if the result is equal to the expected result.
        EXPECT_EQ(resultRaw, result.ToDec());
    }
}



TEST(BigNumberTest, testLargeNumbersHexaDecimalMultiple)
{
    // Verify if multiplication can be performed on the large number in decimals.

    const TestLargeNumberMultipleData testLargeNumberMultipleDataHexa = 
    {
         { "0", "0", "0" },
         { "0", "-1", "0" },
         { "-1", "-1", "1" },
         { "1", "1", "1" },
         { "3e8", "56bc75e2d63100000", "100000000000000000000000" },
         { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 
           "-1", 
           "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
         },
         { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
           "0",
           "0"
         },
         { "7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
           "2",
           "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137214"
         }
    };
    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedRes] : testLargeNumberMultipleDataHexa ){
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromHex(lhsraw);
        
        // get "RightHandSide(RHS)"
        rhs.FromHex(rhsraw);

        // perform LHS * RHS
        BigNumber result = lhs * rhs;

        // check if the result is equal to the expected result.
        EXPECT_EQ(expectedRes, result.ToDec());
    }
}

TEST(BigNumberTest, testLargeNumbersDecimalDivision){
    // Verify if division  can be performed on the large number in decimals.
    const TestLargeNumberDivisionData testLargeNumberDivisionDecimalData = 
    {
         { "0", "0", "0" },
         { "0", "-1", "0" },
         { "-1", "-1", "1" },
         { "1", "1", "1" },
         { "1000", "100000000000000000000", "0" },
         { "100000000000000000000", "1000", "100000000000000000" },
         { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215", 
           "-1", 
           "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
         },
         { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
           "0",
           "0"
         },
         { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
           "2",
           "44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304"
         }
    };


    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedRES] : testLargeNumberDivisionDecimalData){
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromDec(lhsraw);
                
        // get "RightHandSide(RHS)"
        rhs.FromDec(rhsraw);

        // perform LHS / RHS, expect an exception if the RHS is 0
        if (rhs.ToDec() == "0"){
            EXPECT_THROW(lhs / rhs, std::exception);
        }
        else
        {
            BigNumber result = lhs / rhs;
            // check if the result is equal to the expected result.
            EXPECT_EQ(expectedRES, result.ToDec());
        }
    }
}


TEST(BigNumberTest, testLargeNumbersHexaDecimalDivision){
    // Verify if division  can be performed on the large number in hexa decimals.

    const TestLargeNumberDivisionData testLargeNumberDivisionHexaDecimalData = 
    {
         { "0", "0", "0" },
         { "0", "-1", "0" },
         { "-1", "-1", "1" },
         { "1", "1", "1" },
         { "3e8", "56bc75e2d63100000", "0" },
         { "56bc75e2d63100000", "3e8", "100000000000000000" },
         { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 
           "-1", 
           "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" 
         },
         { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
           "0",
           "0"
         },
         { "8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
           "2",
           "44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304"
         }
    };

    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedRAW] : testLargeNumberDivisionHexaDecimalData)
    {
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromHex(lhsraw);
        
        // get "RightHandSide(RHS)"
        rhs.FromHex(rhsraw);

        // perform LHS / RHS, expect an exception if the RHS is 0
        if (rhs.ToDec() == "0"){
            EXPECT_THROW(lhs / rhs, std::exception);
        }
        else{
            BigNumber result = lhs / rhs;
            // check if the result is equal to the expected result.
            EXPECT_EQ(expectedRAW, result.ToDec());
        }
    }
}


TEST(BigNumberTest, testLargeNumbersDecimalLeftShift){
    // Verify if left shift  can be performed on the large number in decimals.

    const TestLargeNumberShiftData testLargeNumberLeftShiftData = 
    {
         { "0", "0", "0" },
         { "0", "1", "0" },
         { "0", "-1", "0" },
         { "1", "0", "1" },
         { "1", "1", "2" },
         { "1", "-1", "0" },
         { "-1", "1", "-2" },
         { "-1", "-1", "0" },
         { "100000000000000000000", "1000", "1071508607186267320948425049060001810561404811705533607443750388370351051124936122493198378815695858127594672917553146825187145285692314043598457757469857480393456777482423098542107460506237114187795418215304647498358194126739876755916554394607706291457119647768654216766042983165262438683720566806937600000000000000000000" },
         { "1000", "1000", "10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376000" },
         { "1000", "-1000", "0"},
         { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
           "1",
           "359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278948248755535786849730970552604439202492188238906165904170011537676301364684925762947826221081654474326701021369172596479894491876959432609670712659248448274430"
         },
         { "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
           "2",
           "359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278948248755535786849730970552604439202492188238906165904170011537676301364684925762947826221081654474326701021369172596479894491876959432609670712659248448274432"
         }
    };
    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedraw] : testLargeNumberLeftShiftData)
    {
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromDec(lhsraw);
        
        // get "RightHandSide(RHS)"
        rhs.FromDec(rhsraw);

        // perform  LHS << RHS, where expect a exception if the RHS is -ve
        if (rhs.ToDec().length() > 0 && rhs.ToDec()[0] == '-'){
            EXPECT_THROW(lhs << rhs, std::exception);
        }
        else{
            BigNumber result = lhs << rhs;
            // check if the result is equal to the expected result.
            EXPECT_EQ(expectedraw, result.ToDec());
        }
    }
}


TEST(BigNumberTest, testLargeNumbersHexDecimalLeftShift)
{
    // Verify if left shift  can be performed on the large number in decimals.
    const TestLargeNumberShiftData testLargeNumberLeftShiftHexaData =
    {
        { "0", "0", "0" },
        { "0", "1", "0" },
        { "0", "-1", "0" },
        { "1", "0", "1" },
        { "1", "1", "2" },
        { "1", "-1", "0" },
        { "-1", "1", "-2" },
        { "-1", "-1", "0" },
        { "56bc75e2d63100000", "3e8", "1071508607186267320948425049060001810561404811705533607443750388370351051124936122493198378815695858127594672917553146825187145285692314043598457757469857480393456777482423098542107460506237114187795418215304647498358194126739876755916554394607706291457119647768654216766042983165262438683720566806937600000000000000000000"},
        { "3e8", "3e8", "10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376000"},
        { "3e8", "-3e8", "0"},
        { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
          "1",
          "359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278948248755535786849730970552604439202492188238906165904170011537676301364684925762947826221081654474326701021369172596479894491876959432609670712659248448274430"
        },
        { "8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "2",
          "359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278948248755535786849730970552604439202492188238906165904170011537676301364684925762947826221081654474326701021369172596479894491876959432609670712659248448274432"
        }
    };

    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedraw] : testLargeNumberLeftShiftHexaData)
    {
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromHex(lhsraw);
        
        // get "RightHandSide(RHS)"
        rhs.FromHex(rhsraw);

        // perform  LHS << RHS, where expect a exception if the RHS is -ve
        if (rhs.ToDec().length() > 0 && rhs.ToDec()[0] == '-'){
            EXPECT_THROW(lhs << rhs, std::exception);
        }
        else{
            BigNumber result = lhs << rhs;
            // check if the result is equal to the expected result.
           EXPECT_EQ(expectedraw, result.ToDec());
        }
    }
}

TEST(BigNumberTest, testLargeNumbersDecimalRightShift){
    // Verify if right shift  can be performed on the large number in decimals.
    const TestLargeNumberShiftData testLargeNumberRightShiftData = 
    {
        { "0", "0", "0" },
        { "0", "1", "0" },
        { "1", "0", "1" },
        { "0", "-1", "0" },
        { "1", "1", "0" },
        { "1", "-1", "0" },
        { "-1", "1", "0" },
        { "-1", "-1", "0" },
        { "100000000000000000000", "1000", "0" },
        { "-100000000000000000000", "1000", "0" },
        { "1000", "1", "500" },
        { "-1000", "1", "-500" },
        { "-1000", "3", "-125" },
        { "1000", "1000", "0" },
        { "-1000", "1000", "0" },
        { "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
          "1", 
          "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607" 
        },
        { "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
          "1", 
          "-89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607" 
        },
        {"89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
         "2",
         "22471164185778948846616314884862809170224712236778832159178760144716584475687620391588559665300942002640014234983924169707348721101802077811605928829934265547220986678108185659537777450155761764931635369010625721104768835292807860184239138817603404645418813835573287279993405742309964538104419541203028017152"
        },
    };

    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedRaw] : testLargeNumberRightShiftData)
    {
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromDec(lhsraw);
        
        // get "RightHandSide(RHS)"
        rhs.FromDec(rhsraw);

        // perform  LHS >> RHS, where expect a exception if the RHS is -ve
        if (rhs.ToDec().length() > 0 && rhs.ToDec()[0] == '-'){
            EXPECT_THROW(lhs >> rhs, std::exception);
        }
        else{
            BigNumber result = lhs >> rhs;
            // check if the result is equal to the expected result.
            EXPECT_EQ(expectedRaw, result.ToDec());
        }
    }
}

TEST(BigNumberTest, testLargeNumbersHexaDecimalRightShift){
    // Verify if right shift  can be performed on the large number in decimals.

    const TestLargeNumberShiftData testLargeNumberRightShiftHexaData = 
    {
         { "0", "0", "0" },
         { "0", "1", "0" },
         { "1", "0", "1" },
         { "0", "-1", "0" },
         { "1", "1", "0" },
         { "1", "-1", "0" },
         { "-1", "1", "0" },
         { "-1", "-1", "0" },
         { "56bc75e2d63100000", "3e8", "0" },
         { "-56bc75e2d63100000", "-3e8", "0" },
         { "3e8", "1", "500" },
         { "-3e8", "1", "-500" },
         { "-3e8", "3", "-125" },
         { "3e8", "3e8", "0" },
         { "-3e8", "3e8", "0" },
         { "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
           "1", 
           "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607" 
         },
         { "-ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
           "1", 
           "-89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607" 
         },
         {"8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "2",
          "22471164185778948846616314884862809170224712236778832159178760144716584475687620391588559665300942002640014234983924169707348721101802077811605928829934265547220986678108185659537777450155761764931635369010625721104768835292807860184239138817603404645418813835573287279993405742309964538104419541203028017152"
         },
    };

    // Iterate over Data for large number addition
    for (const auto &[lhsraw, rhsraw, expectedraw] : testLargeNumberRightShiftHexaData){
        BigNumber lhs, rhs;
        // get "LefthandSide(LHS)"
        lhs.FromHex(lhsraw);
    
        // get "RightHandSide(RHS)"
        rhs.FromHex(rhsraw);
        // perform  LHS >> RHS, where expect a exception if the RHS is -ve
        if (rhs.ToDec().length() > 0 && rhs.ToDec()[0] == '-'){
            EXPECT_THROW(lhs >> rhs, std::exception);
        }
        else{
            BigNumber result = lhs >> rhs;
            // check if the result is equal to the expected result.
            EXPECT_EQ(expectedraw, result.ToDec());
        }
    }
}

TEST(BigNumberTest, testLargeNumbersPreIncrementData){
    // Verify if pre increment can be performed on the large number in decimals.
    const std::vector<std::tuple<std::string, std::string>> testPreIncrementData = 
    {
        {"0", "1"},
        {"1", "2"},
        {"-1", "0"},
        {"1024", "1025"},
        {"-1024", "-1023"},
        {"100000000000000000000", "100000000000000000001"},
        {"-100000000000000000000", "-99999999999999999999"},
        {
            "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215", 
            "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216"
        },
        {
            "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
            "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137214"
        },
        {
            "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
            "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068609"
        },
        {
            "-189884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
            "-189884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607"
        }
    };


    for(const auto &[lhsraw, expectedRes] : testPreIncrementData){
        BigNumber val;
        val.FromDec(lhsraw);
        BigNumber result = ++val;
        EXPECT_EQ(expectedRes, result.ToDec());
    }
}

TEST(BigNumberTest, testLargeNumbersPostIncrementData){
    // Verify if post increment can be performed on the large number in decimals.

    const std::vector<std::string> testPostIncrementData = 
    {
        {"0"},
        {"1"},
        {"-1"},
        {"1024"},
        {"-1024"},
        {"100000000000000000000"},
        {"-100000000000000000000"},
        {"179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"},
        {"-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"},
        {"89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608"},
        {"-189884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608"}
    };

    for(const auto & entry: testPostIncrementData){
        BigNumber val;
        val.FromDec(entry);
        BigNumber result = val++;
        EXPECT_EQ(entry, result.ToDec());
    }

}


TEST(BigNumberTest, testLargeNumbersPreDecrementData){
    // Verify if pre decrement can be performed on the large number in decimals.

    const std::vector<std::tuple<std::string, std::string>> testPreDecrementData = 
    {
        {"0", "-1"},
        {"1", "0"},
        {"-1", "-2"},
        {"1024", "1023"},
        {"-1024", "-1025"},
        {"100000000000000000000", "99999999999999999999"},
        {"-100000000000000000000", "-100000000000000000001"},
        {
            "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
            "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137214"
        },
        {
            "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215",
            "-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216"
        },
        {
            "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
            "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068607"
        },
        {
            "-189884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608",
            "-189884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068609"
        }
    };

    for(const auto&[val1, val2] : testPreDecrementData){
        BigNumber val;
        val.FromDec(val1);
        BigNumber result = --val;
        EXPECT_EQ(val2, result.ToDec());
    }
}

TEST(BigNumberTest, testLargeNumbersPostDecrementData)
{
    // Verify if post decrement can be performed on the large number in decimals.

    const std::vector<std::string> testPostDecrementData = 
    {
        {"0"},
        {"1"},
        {"-1"},
        {"1024"},
        {"-1024"},
        {"100000000000000000000"},
        {"-100000000000000000000"},
        {"179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215"}, 
        {"-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215" },
        {"89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608"},
        {"-189884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608"}
    };

    for(const auto & entry : testPostDecrementData){
        BigNumber val;
        val.FromDec(entry);
        BigNumber result = val--;
        EXPECT_EQ(entry, result.ToDec());
    }
}


TEST(BigNumberTest, test_primeness_cpp){
    const std::vector<std::string> prime_dec_values = get_small_primes_dec();
    for (const auto& prime_dec : prime_dec_values){
        BigNumber primeBN;
        primeBN.FromDec(prime_dec);
        EXPECT_TRUE(primeBN.isPrime());
    }

    const std::vector<std::string> prime_hex_values = get_small_primes_hex();
    for (const auto& prime_hex : prime_hex_values){
        BigNumber primeBN;
        primeBN.FromHex(prime_hex);
        EXPECT_TRUE(primeBN.isPrime());
    }
}

TEST(BigNumberTest, test_BN_IO){
    {
        const std::string G_x_hex{ "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"};
        BigNumber Gx; Gx.FromHex(G_x_hex);
        EXPECT_TRUE(Gx.ToHex() == G_x_hex);
        const std::string G_y_hex{ "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"};
        BigNumber Gy; Gy.FromHex(G_y_hex);
        EXPECT_TRUE(Gy.ToHex() == G_y_hex);
        const std::string G_n_hex{ "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"};
        BigNumber Gn; Gn.FromHex(G_n_hex);
        EXPECT_TRUE(Gn.ToHex() == G_n_hex);
    }
}


TEST(BigNumberTest, test_BN_Mod_5)
{
    BigNumber mod, arg, ret, test_ret;
    mod.FromDec("5");
    arg.FromDec("12");
    test_ret.FromDec("2");
    ret = arg % mod;
    EXPECT_TRUE(ret == test_ret);// 2 == 12 mod 5
}

TEST(BigNumberTest, test_BN_Inv_mod_5)
{
    {
        BigNumber mod, arg, ret, test_ret;
        mod.FromDec("5");
        arg.FromDec("2");
        test_ret.FromDec("3");
        ret = Inv_mod(arg, mod);
        EXPECT_TRUE(ret == test_ret);// 2 == 1/3 mod 5
    }
    {   //// Add an special test case (tested on python)
        const std::string k_hex    { "C5BDF8673298782F3587BDF2BAC0A5FA5E37C1B48A74426007C02A8A140A26F7"};
        const std::string invk_hex { "9934C02FF40A9FF9C5D219E136FC7F0B6ECB5226564C7DA5FAE5084470C940D4"};
        const std::string G_n_hex  { "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"};

        BigNumber mod, arg, ret, test_ret;
        mod.FromHex(G_n_hex);
        arg.FromHex(k_hex);
        test_ret.FromHex(invk_hex);
        ret = Inv_mod(arg, mod);
        EXPECT_EQ(ret, test_ret); // invk = k^{-1} mod Gn
    }
}


TEST(BigNumberTest, test_BN_Add_mod_5){
    BigNumber mod, lhs, rhs, ret, test_ret;
    mod.FromDec("5");
    lhs.FromDec("3");
    rhs.FromDec("4");
    test_ret.FromDec("2");
    ret = Add_mod(lhs, rhs, mod);
    EXPECT_EQ(ret, test_ret); // 3+4 == 2 mod 5
}

TEST(BigNumberTest,  test_BN_Sub_mod_5){
    BigNumber mod, lhs, rhs, ret, test_ret;
    mod.FromDec("5");
    lhs.FromDec("2");
    rhs.FromDec("4");
    test_ret.FromDec("3");
    ret = Sub_mod(lhs, rhs, mod);
    EXPECT_EQ(ret, test_ret); // 2-4 == 3 mod 5
}

TEST(BigNumberTest, test_BN_Mul_mod_5){
    BigNumber mod, lhs, rhs, ret, test_ret;
    mod.FromDec("5");
    lhs.FromDec("2");
    rhs.FromDec("3");
    test_ret.FromDec("1");
    ret = Mul_mod(lhs, rhs, mod);
    EXPECT_EQ(ret, test_ret); // 2*3 == 1 mod 5
}

TEST(BigNumberTest, test_BN_Div_mod_5){
    BigNumber mod, lhs, rhs, ret, test_ret;
    mod.FromDec("5");
    lhs.FromDec("2");
    rhs.FromDec("3");
    test_ret.FromDec("4");
    ret = Div_mod(lhs, rhs, mod);
    EXPECT_TRUE(ret == test_ret); // 2/3 == 4 mod 5
}

TEST(BigNumberTest, test_BN_ToBin){
    BigNumber val, val2;
    std::string strVal = "5893745893477895348925689286234895892375907239047592347858972349057902347589034788905723490799";
    val.FromDec(strVal);
    val2.FromDec(strVal);
    EXPECT_TRUE(val.ToBin() == val2.ToBin());
}

TEST(BigNumberTest, test_BN_ToBin_zero){
    BigNumber val;
    std::string strVal = "0";
    val.FromDec(strVal);
    EXPECT_TRUE(val.ToBin().size() == 0);
}

TEST(BigNumberTest, test_BN_FromBin){
    BigNumber val, val2;
    std::string strVal = "5893745893477895348925689286234895892375907239047592347858972349057902347589034788905723490799";
    val.FromDec(strVal);
    std::vector<uint8_t> valBin = val.ToBin();
    val2.FromBin((unsigned char*)valBin.data(), valBin.size());
    EXPECT_TRUE(val == val2);
}

TEST(BigNumberTest, test_BN_FromBin_Vec_uint8){
    BigNumber val2;
    std::string valBN = "4924799637085902610613593248202630104520906895028320197159361210405324285739921147081495653543217499350505484682143206828111533320447609302848947120288676219378248141142763720774252502319922536271908355561433827150671801432377";
    std::string strVal = "5893745893477895348925689286234895892375907239047592347858972349057902347589034788905723490799";
    std::vector<uint8_t>  uint8_val(strVal.begin(), strVal.end());
    val2.FromBin(uint8_val);
    EXPECT_TRUE( valBN == val2.ToDec());
    EXPECT_TRUE( uint8_val == val2.ToBin());
}
